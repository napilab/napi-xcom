"use strict";(self.webpackChunknapi_xcom=self.webpackChunknapi_xcom||[]).push([[795],{4717:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"type":"mdx","permalink":"/","source":"@site/src/pages/index.md","title":"NaPi-X","description":"NaPi (Yocto project)","frontMatter":{"title":"NaPi-X","description":"NaPi (Yocto project)","hide_table_of_contents":true},"unlisted":false}');var s=n(4848),a=n(8453);const r={title:"NaPi-X",description:"NaPi (Yocto project)",hide_table_of_contents:!0},o="Napi-X Ecosystem",d={},c=[{value:"Components of Napi-X",id:"components-of-napi-x",level:3},{value:"Napi-X Architecture Diagram",id:"napi-x-architecture-diagram",level:3},{value:"NapiOS - the operating system",id:"napios---the-operating-system",level:2},{value:"Special futures of NapiOS for embedded and network devices",id:"special-futures-of-napios-for-embedded-and-network-devices",level:3},{value:"Advantages of This Approach",id:"advantages-of-this-approach",level:3}];function l(e){const i={admonition:"admonition",blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"napi-x-ecosystem",children:"Napi-X Ecosystem"})}),"\n",(0,s.jsxs)(i.p,{children:["\ud83d\udd25"," Everything you need to manage embedded and network devices","\ud83d\udd25"]}),"\n",(0,s.jsx)(i.p,{children:"Out team is hardly working on the development of:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"The NapiOS operating system from strach with integrated embedded futures;"}),"\n",(0,s.jsx)(i.li,{children:"Powerfull API for managing devices with NapiOS;"}),"\n",(0,s.jsx)(i.li,{children:"Web applications for convenient access to the management interface."}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"components-of-napi-x",children:"Components of Napi-X"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Napi-X.OS"})," \u2014 the NapiOS operating system, optimized for embedded and networking devices, based on Linux. It includes built-in software for working with sensors and data streams out of the box (Grafana, Telegraf, InfluxDB, Mosquitto)."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Napi-X.API"})," \u2014 an interface for managing NapiOS's core settings and working with sensors."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Napi-X.WebApp"})," \u2014 a web application for device management based on NapiOS."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Napi-X.Server"})," \u2014 a server platform for centralized device management under NapiOS. It implements the concept of Software-Defined Device Management (SDDM) and includes a web application for authorizing and managing multiple devices."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h3,{id:"napi-x-architecture-diagram",children:"Napi-X Architecture Diagram"}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"alt text",src:n(6709).A+"",width:"1686",height:"1485"})}),"\n",(0,s.jsx)(i.h2,{id:"napios---the-operating-system",children:"NapiOS - the operating system"}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsx)(i.p,{children:'NapiOS is a fully open system with accessible Linux packages, development environments, and the full range of Linux\'s capabilities. This is "the heart" of Napi-X Ecosystem.'})}),"\n",(0,s.jsx)(i.p,{children:"The main distinction of NapiOS from traditional distributions (Debian, Ubuntu, DietPi) is the presence of duplicate system partitions and a separate partition for user data (overlay fs)."}),"\n",(0,s.jsx)(i.p,{children:"This provides the following key benefits:"}),"\n",(0,s.jsx)(i.p,{children:"Firmware updates with the ability to revert to the previous version.\nFast backup and restoration of user data only (overlay fs).\nThe ability to reset to default settings without reinstalling the system."}),"\n",(0,s.jsx)(i.p,{children:"We make Linux simple and enjoyable for use in embedded systems."}),"\n",(0,s.jsx)(i.h3,{id:"special-futures-of-napios-for-embedded-and-network-devices",children:"Special futures of NapiOS for embedded and network devices"}),"\n",(0,s.jsx)(i.p,{children:'The system can boot either from partition 1 (/dev/mmcblk1p1) or partition 2 (/dev/mmcblk1p2). During a system update, one of the partitions (the older one) is updated. If the update fails, the system will boot from the other partition. Partition 3 (/dev/mmcblk1p3) is used for user data and contains all configurations, user files, databases, etc. To create a backup, it is not necessary to copy the entire system; backing up this partition is sufficient. To "reset" the system, all you need to do is erase the data in this partition.'}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"alt text",src:n(5778).A+"",width:"803",height:"389"})}),"\n",(0,s.jsx)(i.h3,{id:"advantages-of-this-approach",children:"Advantages of This Approach"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:(0,s.jsx)(i.strong,{children:"Fault Tolerance."})})," If a system update fails, the bootloader can switch to the other partition, ensuring the system remains operational without requiring manual intervention."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:(0,s.jsx)(i.strong,{children:"Separation of Concerns."})})," The system partitions and user data are kept separate, simplifying backups and updates while minimizing the risk of data loss during system updates or resets."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:(0,s.jsx)(i.strong,{children:"Efficient Backups"})}),". Since only the user data partition needs to be backed up, the process is faster, consumes less storage space, and simplifies disaster recovery procedures."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:(0,s.jsx)(i.strong,{children:"Simplified Reset Process."})})," To reset the system to a default state, it is sufficient to erase the user data partition, without affecting the core system functionality."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:(0,s.jsx)(i.strong,{children:"Rollback Capability."})})," Updates are applied to the inactive system partition, allowing for easy rollback to the previous version in case of issues."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:(0,s.jsx)(i.strong,{children:"Improved Update Management."})})," With the ability to update one partition while the other remains active, downtime during updates is minimized."]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.em,{children:(0,s.jsx)(i.strong,{children:"Enhanced System Reliability."})})," The dual-partition approach ensures the system always has a fallback option, reducing the likelihood of complete system failure."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.em,{children:(0,s.jsx)(i.strong,{children:"This architecture is especially useful in embedded systems, IoT devices, network routers and environments where reliability and ease of maintenance are critical."})})}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},5778:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/napi-os-fs-arch-8878bf58dd2b0943eda71d5520165d16.png"},6709:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/napi-x-arch-2-d7ae763562f40ea59ed9c016cae82997.png"},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>o});var t=n(6540);const s={},a=t.createContext(s);function r(e){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);